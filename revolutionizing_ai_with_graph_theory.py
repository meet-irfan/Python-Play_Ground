# -*- coding: utf-8 -*-
"""Revolutionizing AI with Graph Theory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DTPnYR58C6n7mPrMFI66DqHMP7XhhRjl
"""

# Import necessary libraries
import networkx as nx
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Create a sample graph (as a recommendation system example)
G = nx.Graph()

# Add nodes representing users and items (for simplicity)
G.add_nodes_from(['User1', 'User2', 'User3'], bipartite=0)  # User group
G.add_nodes_from(['ItemA', 'ItemB', 'ItemC'], bipartite=1)  # Item group

# Add edges representing interactions (like purchase history)
G.add_edges_from([('User1', 'ItemA'), ('User2', 'ItemB'), ('User3', 'ItemA'), ('User3', 'ItemC')])

# Visualize the graph structure
import matplotlib.pyplot as plt
nx.draw(G, with_labels=True, node_color=['lightblue' if n in ['User1', 'User2', 'User3'] else 'lightgreen' for n in G.nodes()])
plt.show()

# Create a biadjacency matrix
users = ['User1', 'User2', 'User3']
items = ['ItemA', 'ItemB', 'ItemC']
biadj_matrix = nx.bipartite.biadjacency_matrix(G, row_order=users, column_order=items).toarray()

# Print biadjacency matrix
print("Biadjacency Matrix:\n", biadj_matrix)

# Calculate cosine similarity between users based on item interactions
user_similarity = cosine_similarity(biadj_matrix)
print("\nUser Similarity Matrix:\n", user_similarity)

# Make recommendations based on user similarity (a simple example)
# Recommend items to User1 based on the most similar user (User3 in this case)
similar_user = np.argmax(user_similarity[0, 1:]) + 1  # +1 to skip self-similarity (User1)
recommended_items = np.where(biadj_matrix[similar_user] == 1)[0]
print("\nRecommended items for User1 based on User", similar_user + 1, ":", [items[i] for i in recommended_items])