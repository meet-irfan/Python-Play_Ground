# -*- coding: utf-8 -*-
"""Q-Learning for Frozen Lake.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jr1uS36tydQrCfa-XF2A2FvWZSFEsIo3
"""

import numpy as np
import gym

# Create the Frozen Lake environment
env = gym.make('FrozenLake-v1', is_slippery=True)

# Initialize the Q-table (state-action table)
action_size = env.action_space.n  # Number of possible actions
state_size = env.observation_space.n  # Number of possible states
q_table = np.zeros((state_size, action_size))

# Hyperparameters
learning_rate = 0.8  # Also known as alpha
discount_rate = 0.95  # Also known as gamma
episodes = 10000  # Number of episodes
max_steps = 100  # Maximum number of steps per episode
exploration_rate = 1.0  # Initial exploration rate
min_exploration_rate = 0.01
exploration_decay_rate = 0.001

# List of rewards per episode
rewards_all_episodes = []

# Q-learning algorithm
for episode in range(episodes):
    state = env.reset()  # Reset the environment to start a new episode
    done = False
    rewards_current_episode = 0

    for step in range(max_steps):
        # Exploration-exploitation tradeoff
        if np.random.uniform(0, 1) < exploration_rate:
            action = env.action_space.sample()  # Explore: random action
        else:
            action = np.argmax(q_table[state, :])  # Exploit: best action from Q-table

        # Take action and observe the outcome
        new_state, reward, done, info = env.step(action)

        # Q-Learning formula
        q_table[state, action] = q_table[state, action] * (1 - learning_rate) + \
                                 learning_rate * (reward + discount_rate * np.max(q_table[new_state, :]))

        state = new_state
        rewards_current_episode += reward

        if done:
            break

    # Decay exploration rate
    exploration_rate = min_exploration_rate + (1.0 - min_exploration_rate) * np.exp(-exploration_decay_rate * episode)

    rewards_all_episodes.append(rewards_current_episode)

# Calculate and print the average reward per thousand episodes
rewards_per_thousand_episodes = np.split(np.array(rewards_all_episodes), episodes/1000)
count = 1000
for r in rewards_per_thousand_episodes:
    print(f"Average reward for episodes {count-1000} to {count}: {np.mean(r)}")
    count += 1000

# Display the learned Q-table
print("\nQ-table:")
print(q_table)

# Test the agent after training
for episode in range(3):
    state = env.reset()
    done = False
    print(f"Episode: {episode+1}\n\n")
    for step in range(max_steps):
        action = np.argmax(q_table[state, :])
        new_state, reward, done, info = env.step(action)
        env.render()
        state = new_state
        if done:
            break
env.close()